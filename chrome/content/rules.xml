<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Instantbird messenging client, released
   - 2007.
   -
   - The Initial Developer of the Original Code is
   - Florian QUEZE <florian@instantbird.org>.
   - Portions created by the Initial Developer are Copyright (C) 2007
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Romain Bezut <romain@bezut.info>
   -   Patrick Cloke <clokep@gmail.com>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings xmlns="http://www.mozilla.org/xbl"
		  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
		  xmlns:xbl="http://www.mozilla.org/xbl">

	<binding id="ruleitem" extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
		<resources>
			<stylesheet src="chrome://autolink/content/rules.css"/>
		</resources>
		<content>
			<xul:vbox flex="1">
				<xul:hbox anonid="nameRow" align="baseline">
					<xul:label crop="end" control="name" value="Rule Name"/>
					<xul:textbox anonid="name" xbl:inherits="value=name" flex="1"/>
					<xul:button anonid="protocols" type="menu" label="Choose Protocols">
						<xul:menupopup anonid="prplMenu" onpopupshowing="return showPopup(event);" onpopuphiding="return closePopup(event);">
							<xul:menuitem label="All" type="checkbox" oncommand="/* Uncheck everything else */"/>
							<xul:menuseparator anonid="prplMenuSepStart"/>
							<xul:menuseparator anonid="prplMenuSepEnd"/>
							<xul:menuitem label="Close"/>
						</xul:menupopup>
					</xul:button>
				</xul:hbox>
				<xul:hbox anonid="miscRow" align="baseline">
					<xul:label crop="end" control="accountName" value="Account Name"/>
					<xul:regexp anonid="accountName" oncommand="copy('accountNameLabel');" hideFlags="true" highlightSyntax="false" flex="1"/>
					<xul:label crop="end" control="conversationName" value="Conversation Name"/>
					<xul:regexp anonid="conversationName" hideFlags="true" highlightSyntax="false" flex="1"/>
				</xul:hbox>
				<xul:hbox anonid="patternRow" align="baseline">
					<xul:label crop="end" control="pattern" value="Pattern"/>
					<xul:regexp anonid="pattern" global="true" flex="1"/>
				</xul:hbox>
				<xul:hbox anonid="linkRow" align="baseline">
					<xul:label crop="end" control="link" value="Link URL"/>
					<xul:textbox anonid="link" xbl:inherits="value=link" flex="2"/>
					<xul:label crop="end" control="title" value="Link Title"/>
					<xul:textbox anonid="title" xbl:inherits="value=title" flex="1"/>
				</xul:hbox>
			</xul:vbox>
		</content>
		<implementation>
			<method name="build">
				<parameter name="aRule"/>
				<parameter name="aProtos"/>
				<body>
					<![CDATA[
						this.setAttribute("name", aRule.name);
						document.getAnonymousElementByAttribute(this, "anonid", "accountName").regexp = aRule.accountName;
						document.getAnonymousElementByAttribute(this, "anonid", "conversationName").regexp = aRule.conversationName
						document.getAnonymousElementByAttribute(this, "anonid", "pattern").regexp = aRule.pattern
						this.setAttribute("link", aRule.link);
						this.setAttribute("title", aRule.title);

						var menu = document.getAnonymousElementByAttribute(this, "anonid", "prplMenu");
						var insertBefore = document.getAnonymousElementByAttribute(this, "anonid", "prplMenuSepEnd");
						aProtos.forEach(function(proto) {
							let menuitem = document.createElement("menuitem");
							menuitem.setAttribute("label", proto.name);
							menuitem.setAttribute("anonid", proto.id);
							menuitem.setAttribute("type", "checkbox");
							menuitem.setAttribute("closemenu", "none");
							menuitem.setAttribute("class", "menuitem-iconic"); // XXX type=checkbox can't support images
							menuitem.setAttribute("image", proto.iconBaseURI + "icon32.png");
							
							if (aRule.protocols.some(function(protocol) {
								return (proto.id.toLowerCase() == protocol.toLowerCase());
							}))
								menuitem.setAttribute("checked", "true");

							menu.insertBefore(menuitem, insertBefore);
						});

						if (!aRule.protocols.length)
							document.getAnonymousElementByAttribute(this, "anonid", "prplAll").setAttribute("checked", "true");
					]]>
				</body>
			</method>
			<method name="save">
				<body>
					<![CDATA[
						let rule = {};
						rule.name = document.getAnonymousElementByAttribute(this, "anonid", "name").value;
						rule.accountName = document.getAnonymousElementByAttribute(this, "anonid", "accountName").regexp.toString();
						rule.conversationName = document.getAnonymousElementByAttribute(this, "anonid", "conversationName").regexp.toString();
						rule.pattern = document.getAnonymousElementByAttribute(this, "anonid", "pattern").regexp.toString();
						rule.link = document.getAnonymousElementByAttribute(this, "anonid", "link").value;
						rule.title = document.getAnonymousElementByAttribute(this, "anonid", "title").value;

						let menu = document.getAnonymousElementByAttribute(this, "anonid", "prplMenu");
						let menuitems = menu.children;
						rule.protocols = [];
						for (var i = 0; i < menuitems.length; i++)
							if (menuitems[i].tagName == "menuitem" && menuitems[i].hasAttribute("anonid")
								&& menuitems[i].hasAttribute("checked"))
								rule.protocols.push(menuitems[i].getAttribute("anonid"));

						return rule;
					]]>
				</body>
			</method>

		</implementation>
	</binding>
</bindings>
